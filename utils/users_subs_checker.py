import asyncio
from aiogram import Bot

from data.database import db
from utils.time_utils import get_timestamp


async def users_subs_checker_func(bot: Bot):
    while True:
        try:
            active_subs = await db.get_active_subscriptions()

            for sub in active_subs:
                user_id = sub["user_id"]
                project_id = sub["project_id"]
                rate_id = sub["rate_id"]
                end_date = sub["date"]
                rate_info = await db.get_rate(rate_id)
                duration_type = rate_info["duration_type"]
                duration = rate_info["duration"]
                project_info = await db.get_project(project_id)

                bot_info = await bot.get_me()
                bot_username = bot_info.username
                paylink = f"https://t.me/{bot_username}?start=project_{project_id}"

                duration_time = 0  # –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —á–∞—Å–∞—Ö
                if duration_type == "days":
                    duration_time = int(duration) * 24
                elif duration_type == "hours":
                    duration_time = int(duration)

                current_time = get_timestamp(0)
                time_left = float(end_date) - float(current_time)
                print(
                    f"User: {user_id}, Project: {project_id}, Rate: {rate_id}, Time left: {time_left}"
                )

                if duration_time >= 72:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è 3 –¥–Ω–µ–π
                    if time_left <= 259200 and not await db.check_alert_sent(
                        user_id, project_id, rate_id, "3_days"
                    ):
                        await bot.send_message(
                            user_id,
                            f"‚ùóÔ∏è–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç {project_info['name']} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è.\nüîó–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É:\n{paylink}",
                        )
                        await db.mark_alert_sent(user_id, project_id, rate_id, "3_days")

                if duration_time >= 24:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è 1 –¥–Ω—è
                    if time_left <= 86400 and not await db.check_alert_sent(
                        user_id, project_id, rate_id, "1_day"
                    ):
                        await bot.send_message(
                            user_id,
                            f"‚ùóÔ∏è–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç {project_info['name']} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏.\nüîó–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É:\n{paylink}",
                        )
                        await db.mark_alert_sent(user_id, project_id, rate_id, "1_day")

                if duration_time > 1:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è 1 —á–∞—Å–∞
                    if time_left <= 3600 and not await db.check_alert_sent(
                        user_id, project_id, rate_id, "1_hour"
                    ):
                        await bot.send_message(
                            user_id,
                            f"‚ùóÔ∏è–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç {project_info['name']} –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ —á–∞—Å.\nüîó–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É:\n{paylink}",
                        )
                        await db.mark_alert_sent(user_id, project_id, rate_id, "1_hour")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")

        await asyncio.sleep(30)
