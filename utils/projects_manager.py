import asyncio
from aiogram import Bot

from data.database import db
from utils.time_utils import format_timestamp, get_timestamp, is_future_time
from utils.json_utils import get_price_per_project


async def projects_manager_func(bot: Bot):
    while True:
        projects = await db.get_projects()

        for project in projects:
            user_id = project["user_id"]
            if project["project_type"] == "fixed":
                formated_date = format_timestamp(
                    float(project["subscription_end_date"])
                )
                is_future = is_future_time(formated_date)

                # –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å
                if not is_future:
                    if project["auto_refill"] == 1:  # –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ
                        user_info = await db.get_user(user_id)
                        price_per_project = get_price_per_project()

                        if float(user_info["balance"]) >= float(
                            price_per_project
                        ):  # –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–µ–Ω —Ü–µ–Ω–µ –∑–∞ –ø—Ä–æ–µ–∫—Ç
                            await db.deduct_balance(user_id, float(price_per_project))

                            sub_time = 30 * 24  # 30 –¥–Ω–µ–π * 24 —á–∞—Å–∞
                            sub_timestamp = get_timestamp(sub_time)

                            is_updated = await db.update_project_subscription_end_date(
                                project["project_id"], sub_timestamp
                            )

                            if is_updated:
                                await bot.send_message(
                                    user_id,
                                    f"üéâ –ü—Ä–æ–µ–∫—Ç {project['name']} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω –Ω–∞ 30 –¥–Ω–µ–π",
                                )
                            else:
                                print(
                                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ {project['name']}"
                                )
                        else:
                            await bot.send_message(
                                user_id,
                                f"üö® –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ {project['name']}",
                            )
                            await db.update_is_active_project(
                                project["project_id"], False
                            )
                    else:
                        await bot.send_message(
                            user_id,
                            f"üö® –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ {project['name']} –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É",
                        )
                        await db.update_is_active_project(project["project_id"], False)

        await asyncio.sleep(120)
